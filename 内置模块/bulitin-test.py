#! /usr/bin/env python
# -*- coding: utf-8 -*-

"""
Created on 2017-9-29

@author: yingrinsing
@github: git@github.com:yingrinsing/python_grammar.git
@copyright: Apache License, Version 2.0
"""

import __builtin__
import laok
#===============================================================================
# 
#===============================================================================

#<module '__builtin__' (built-in)>,<type 'module'>
#attribute---->
    #ArithmeticError[<type 'type'>] [<type 'exceptions.ArithmeticError'>]
    #AssertionError[<type 'type'>] [<type 'exceptions.AssertionError'>]
    #AttributeError[<type 'type'>] [<type 'exceptions.AttributeError'>]
    #BaseException[<type 'type'>] [<type 'exceptions.BaseException'>]
    #BufferError[<type 'type'>] [<type 'exceptions.BufferError'>]
    #BytesWarning[<type 'type'>] [<type 'exceptions.BytesWarning'>]
    #DeprecationWarning[<type 'type'>] [<type 'exceptions.DeprecationWarning'>]
    #EOFError[<type 'type'>] [<type 'exceptions.EOFError'>]
    #Ellipsis[<type 'ellipsis'>] [Ellipsis]
    #EnvironmentError[<type 'type'>] [<type 'exceptions.EnvironmentError'>]
    #Exception[<type 'type'>] [<type 'exceptions.Exception'>]
    #False[<type 'bool'>] [False]
    #FloatingPointError[<type 'type'>] [<type 'exceptions.FloatingPointError'>]
    #FutureWarning[<type 'type'>] [<type 'exceptions.FutureWarning'>]
    #GeneratorExit[<type 'type'>] [<type 'exceptions.GeneratorExit'>]
    #IOError[<type 'type'>] [<type 'exceptions.IOError'>]
    #ImportError[<type 'type'>] [<type 'exceptions.ImportError'>]
    #ImportWarning[<type 'type'>] [<type 'exceptions.ImportWarning'>]
    #IndentationError[<type 'type'>] [<type 'exceptions.IndentationError'>]
    #IndexError[<type 'type'>] [<type 'exceptions.IndexError'>]
    #KeyError[<type 'type'>] [<type 'exceptions.KeyError'>]
    #KeyboardInterrupt[<type 'type'>] [<type 'exceptions.KeyboardInterrupt'>]
    #LookupError[<type 'type'>] [<type 'exceptions.LookupError'>]
    #MemoryError[<type 'type'>] [<type 'exceptions.MemoryError'>]
    #NameError[<type 'type'>] [<type 'exceptions.NameError'>]
    #None[<type 'NoneType'>] [None]
    #NotImplemented[<type 'NotImplementedType'>] [NotImplemented]
    #NotImplementedError[<type 'type'>] [<type 'exceptions.NotImplementedError'>]
    #OSError[<type 'type'>] [<type 'exceptions.OSError'>]
    #OverflowError[<type 'type'>] [<type 'exceptions.OverflowError'>]
    #PendingDeprecationWarning[<type 'type'>] [<type 'exceptions.PendingDeprecationWarning'>]
    #ReferenceError[<type 'type'>] [<type 'exceptions.ReferenceError'>]
    #RuntimeError[<type 'type'>] [<type 'exceptions.RuntimeError'>]
    #RuntimeWarning[<type 'type'>] [<type 'exceptions.RuntimeWarning'>]
    #StandardError[<type 'type'>] [<type 'exceptions.StandardError'>]
    #StopIteration[<type 'type'>] [<type 'exceptions.StopIteration'>]
    #SyntaxError[<type 'type'>] [<type 'exceptions.SyntaxError'>]
    #SyntaxWarning[<type 'type'>] [<type 'exceptions.SyntaxWarning'>]
    #SystemError[<type 'type'>] [<type 'exceptions.SystemError'>]
    #SystemExit[<type 'type'>] [<type 'exceptions.SystemExit'>]
    #TabError[<type 'type'>] [<type 'exceptions.TabError'>]
    #True[<type 'bool'>] [True]
    #TypeError[<type 'type'>] [<type 'exceptions.TypeError'>]
    #UnboundLocalError[<type 'type'>] [<type 'exceptions.UnboundLocalError'>]
    #UnicodeDecodeError[<type 'type'>] [<type 'exceptions.UnicodeDecodeError'>]
    #UnicodeEncodeError[<type 'type'>] [<type 'exceptions.UnicodeEncodeError'>]
    #UnicodeError[<type 'type'>] [<type 'exceptions.UnicodeError'>]
    #UnicodeTranslateError[<type 'type'>] [<type 'exceptions.UnicodeTranslateError'>]
    #UnicodeWarning[<type 'type'>] [<type 'exceptions.UnicodeWarning'>]
    #UserWarning[<type 'type'>] [<type 'exceptions.UserWarning'>]
    #ValueError[<type 'type'>] [<type 'exceptions.ValueError'>]
    #Warning[<type 'type'>] [<type 'exceptions.Warning'>]
    #WindowsError[<type 'type'>] [<type 'exceptions.WindowsError'>]
    #ZeroDivisionError[<type 'type'>] [<type 'exceptions.ZeroDivisionError'>]
    #basestring[<type 'type'>] [<type 'basestring'>]
    #bool[<type 'type'>] [<type 'bool'>]
    #buffer[<type 'type'>] [<type 'buffer'>]
    #bytearray[<type 'type'>] [<type 'bytearray'>]
    #bytes[<type 'type'>] [<type 'str'>]
    #classmethod[<type 'type'>] [<type 'classmethod'>]
    #complex[<type 'type'>] [<type 'complex'>]
    #copyright[<class 'site._Printer'>] [Copyright (c) 2001-2016 Python Software Foundation.  All Rights Reserved.    Copyright (c) 2000 BeOpen.com.  All Rights Reserved.    Copyright (c) 1995-2001 Corporation for National Research Initiatives.  All Rights Reserved.    Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.  All Rights Reserved.]
    #credits[<class 'site._Printer'>] [    Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands      for supporting Python development.  See www.python.org for more information.]
    #dict[<type 'type'>] [<type 'dict'>]
    #enumerate[<type 'type'>] [<type 'enumerate'>]
    #exit[<class 'site.Quitter'>] [Use exit() or Ctrl-Z plus Return to exit]
    #file[<type 'type'>] [<type 'file'>]
    #float[<type 'type'>] [<type 'float'>]
    #frozenset[<type 'type'>] [<type 'frozenset'>]
    #help[<class 'site._Helper'>] [Type help() for interactive help, or help(object) for help about object.]
    #int[<type 'type'>] [<type 'int'>]
    #license[<class 'site._Printer'>] [See https://www.python.org/psf/license/]
    #list[<type 'type'>] [<type 'list'>]
    #long[<type 'type'>] [<type 'long'>]
    #memoryview[<type 'type'>] [<type 'memoryview'>]
    #object[<type 'type'>] [<type 'object'>]
    #property[<type 'type'>] [<type 'property'>]
    #quit[<class 'site.Quitter'>] [Use quit() or Ctrl-Z plus Return to exit]
    #reversed[<type 'type'>] [<type 'reversed'>]
    #set[<type 'type'>] [<type 'set'>]
    #slice[<type 'type'>] [<type 'slice'>]
    #staticmethod[<type 'type'>] [<type 'staticmethod'>]
    #str[<type 'type'>] [<type 'str'>]
    #super[<type 'type'>] [<type 'super'>]
    #tuple[<type 'type'>] [<type 'tuple'>]
    #type[<type 'type'>] [<type 'type'>]
    #unicode[<type 'type'>] [<type 'unicode'>]
    #xrange[<type 'type'>] [<type 'xrange'>]
#builtin-method---->
    #abs [<type 'builtin_function_or_method'>] [abs(number) -> number    Return the absolute value of the argument.]
    #all [<type 'builtin_function_or_method'>] [all(iterable) -> bool    Return True if bool(x) is True for all values x in the iterable.  If the iterable is empty, return True.]
    #any [<type 'builtin_function_or_method'>] [any(iterable) -> bool    Return True if bool(x) is True for any x in the iterable.  If the iterable is empty, return False.]
    #apply [<type 'builtin_function_or_method'>] [apply(object[, args[, kwargs]]) -> value    Call a callable object with positional arguments taken from the tuple args,  and keyword arguments taken from the optional dictionary kwargs.  Note that classes are callable, as are instances with a __call__() method.    Deprecated since release 2.3. Instead, use the extended call syntax:      function(*args, **keywords).]
    #bin [<type 'builtin_function_or_method'>] [bin(number) -> string    Return the binary representation of an integer or long integer.]
    #callable [<type 'builtin_function_or_method'>] [callable(object) -> bool    Return whether the object is callable (i.e., some kind of function).  Note that classes are callable, as are instances with a __call__() method.]
    #chr [<type 'builtin_function_or_method'>] [chr(i) -> character    Return a string of one character with ordinal i; 0 <= i < 256.]
    #cmp [<type 'builtin_function_or_method'>] [cmp(x, y) -> integer    Return negative if x<y, zero if x==y, positive if x>y.]
    #coerce [<type 'builtin_function_or_method'>] [coerce(x, y) -> (x1, y1)    Return a tuple consisting of the two numeric arguments converted to  a common type, using the same rules as used by arithmetic operations.  If coercion is not possible, raise TypeError.]
    #compile [<type 'builtin_function_or_method'>] [compile(source, filename, mode[, flags[, dont_inherit]]) -> code object    Compile the source string (a Python module, statement or expression)  into a code object that can be executed by the exec statement or eval().  The filename will be used for run-time error messages.  The mode must be 'exec' to compile a module, 'single' to compile a  single (interactive) statement, or 'eval' to compile an expression.  The flags argument, if present, controls which future statements influence  the compilation of the code.  The dont_inherit argument, if non-zero, stops the compilation inheriting  the effects of any future statements in effect in the code calling  compile; if absent or zero these statements do influence the compilation,  in addition to any features explicitly specified.]
    #delattr [<type 'builtin_function_or_method'>] [delattr(object, name)    Delete a named attribute on an object; delattr(x, 'y') is equivalent to  ``del x.y''.]
    #dir [<type 'builtin_function_or_method'>] [dir([object]) -> list of strings    If called without an argument, return the names in the current scope.  Else, return an alphabetized list of names comprising (some of) the attributes  of the given object, and of attributes reachable from it.  If the object supplies a method named __dir__, it will be used; otherwise  the default dir() logic is used and returns:    for a module object: the module's attributes.    for a class object:  its attributes, and recursively the attributes      of its bases.    for any other object: its attributes, its class's attributes, and      recursively the attributes of its class's base classes.]
    #divmod [<type 'builtin_function_or_method'>] [divmod(x, y) -> (quotient, remainder)    Return the tuple (x//y, x%y).  Invariant: div*y + mod == x.]
    #eval [<type 'builtin_function_or_method'>] [eval(source[, globals[, locals]]) -> value    Evaluate the source in the context of globals and locals.  The source may be a string representing a Python expression  or a code object as returned by compile().  The globals must be a dictionary and locals can be any mapping,  defaulting to the current globals and locals.  If only globals is given, locals defaults to it.]
    #execfile [<type 'builtin_function_or_method'>] [execfile(filename[, globals[, locals]])    Read and execute a Python script from a file.  The globals and locals are dictionaries, defaulting to the current  globals and locals.  If only globals is given, locals defaults to it.]
    #filter [<type 'builtin_function_or_method'>] [filter(function or None, sequence) -> list, tuple, or string    Return those items of sequence for which function(item) is true.  If  function is None, return the items that are true.  If sequence is a tuple  or string, return the same type, else return a list.]
    #format [<type 'builtin_function_or_method'>] [format(value[, format_spec]) -> string    Returns value.__format__(format_spec)  format_spec defaults to ""]
    #getattr [<type 'builtin_function_or_method'>] [getattr(object, name[, default]) -> value    Get a named attribute from an object; getattr(x, 'y') is equivalent to x.y.  When a default argument is given, it is returned when the attribute doesn't  exist; without it, an exception is raised in that case.]
    #globals [<type 'builtin_function_or_method'>] [globals() -> dictionary    Return the dictionary containing the current scope's global variables.]
    #hasattr [<type 'builtin_function_or_method'>] [hasattr(object, name) -> bool    Return whether the object has an attribute with the given name.  (This is done by calling getattr(object, name) and catching exceptions.)]
    #hash [<type 'builtin_function_or_method'>] [hash(object) -> integer    Return a hash value for the object.  Two objects with the same value have  the same hash value.  The reverse is not necessarily true, but likely.]
    #hex [<type 'builtin_function_or_method'>] [hex(number) -> string    Return the hexadecimal representation of an integer or long integer.]
    #id [<type 'builtin_function_or_method'>] [id(object) -> integer    Return the identity of an object.  This is guaranteed to be unique among  simultaneously existing objects.  (Hint: it's the object's memory address.)]
    #intern [<type 'builtin_function_or_method'>] [intern(string) -> string    ``Intern'' the given string.  This enters the string in the (global)  table of interned strings whose purpose is to speed up dictionary lookups.  Return the string itself or the previously interned string object with the  same value.]
    #isinstance [<type 'builtin_function_or_method'>] [isinstance(object, class-or-type-or-tuple) -> bool    Return whether an object is an instance of a class or of a subclass thereof.  With a type as second argument, return whether that is the object's type.  The form using a tuple, isinstance(x, (A, B, ...)), is a shortcut for  isinstance(x, A) or isinstance(x, B) or ... (etc.).]
    #issubclass [<type 'builtin_function_or_method'>] [issubclass(C, B) -> bool    Return whether class C is a subclass (i.e., a derived class) of class B.  When using a tuple as the second argument issubclass(X, (A, B, ...)),  is a shortcut for issubclass(X, A) or issubclass(X, B) or ... (etc.).]
    #iter [<type 'builtin_function_or_method'>] [iter(collection) -> iterator  iter(callable, sentinel) -> iterator    Get an iterator from an object.  In the first form, the argument must  supply its own iterator, or be a sequence.  In the second form, the callable is called until it returns the sentinel.]
    #len [<type 'builtin_function_or_method'>] [len(object) -> integer    Return the number of items of a sequence or collection.]
    #locals [<type 'builtin_function_or_method'>] [locals() -> dictionary    Update and return a dictionary containing the current scope's local variables.]
    #map [<type 'builtin_function_or_method'>] [map(function, sequence[, sequence, ...]) -> list    Return a list of the results of applying the function to the items of  the argument sequence(s).  If more than one sequence is given, the  function is called with an argument list consisting of the corresponding  item of each sequence, substituting None for missing values when not all  sequences have the same length.  If the function is None, return a list of  the items of the sequence (or a list of tuples if more than one sequence).]
    #max [<type 'builtin_function_or_method'>] [max(iterable[, key=func]) -> value  max(a, b, c, ...[, key=func]) -> value    With a single iterable argument, return its largest item.  With two or more arguments, return the largest argument.]
    #min [<type 'builtin_function_or_method'>] [min(iterable[, key=func]) -> value  min(a, b, c, ...[, key=func]) -> value    With a single iterable argument, return its smallest item.  With two or more arguments, return the smallest argument.]
    #next [<type 'builtin_function_or_method'>] [next(iterator[, default])    Return the next item from the iterator. If default is given and the iterator  is exhausted, it is returned instead of raising StopIteration.]
    #oct [<type 'builtin_function_or_method'>] [oct(number) -> string    Return the octal representation of an integer or long integer.]
    #open [<type 'builtin_function_or_method'>] [open(name[, mode[, buffering]]) -> file object    Open a file using the file() type, returns a file object.  This is the  preferred way to open a file.  See file.__doc__ for further information.]
    #ord [<type 'builtin_function_or_method'>] [ord(c) -> integer    Return the integer ordinal of a one-character string.]
    #pow [<type 'builtin_function_or_method'>] [pow(x, y[, z]) -> number    With two arguments, equivalent to x**y.  With three arguments,  equivalent to (x**y) % z, but may be more efficient (e.g. for longs).]
    #print [<type 'builtin_function_or_method'>] [print(value, ..., sep=' ', end='\n', file=sys.stdout)    Prints the values to a stream, or to sys.stdout by default.  Optional keyword arguments:  file: a file-like object (stream); defaults to the current sys.stdout.  sep:  string inserted between values, default a space.  end:  string appended after the last value, default a newline.]
    #range [<type 'builtin_function_or_method'>] [range(stop) -> list of integers  range(start, stop[, step]) -> list of integers    Return a list containing an arithmetic progression of integers.  range(i, j) returns [i, i+1, i+2, ..., j-1]; start (!) defaults to 0.  When step is given, it specifies the increment (or decrement).  For example, range(4) returns [0, 1, 2, 3].  The end point is omitted!  These are exactly the valid indices for a list of 4 elements.]
    #reduce [<type 'builtin_function_or_method'>] [reduce(function, sequence[, initial]) -> value    Apply a function of two arguments cumulatively to the items of a sequence,  from left to right, so as to reduce the sequence to a single value.  For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates  ((((1+2)+3)+4)+5).  If initial is present, it is placed before the items  of the sequence in the calculation, and serves as a default when the  sequence is empty.]
    #reload [<type 'builtin_function_or_method'>] [reload(module) -> module    Reload the module.  The module must have been successfully imported before.]
    #repr [<type 'builtin_function_or_method'>] [repr(object) -> string    Return the canonical string representation of the object.  For most object types, eval(repr(object)) == object.]
    #round [<type 'builtin_function_or_method'>] [round(number[, ndigits]) -> floating point number    Round a number to a given precision in decimal digits (default 0 digits).  This always returns a floating point number.  Precision may be negative.]
    #setattr [<type 'builtin_function_or_method'>] [setattr(object, name, value)    Set a named attribute on an object; setattr(x, 'y', v) is equivalent to  ``x.y = v''.]
    #sorted [<type 'builtin_function_or_method'>] [sorted(iterable, cmp=None, key=None, reverse=False) --> new sorted list]
    #sum [<type 'builtin_function_or_method'>] [sum(sequence[, start]) -> value    Return the sum of a sequence of numbers (NOT strings) plus the value  of parameter 'start' (which defaults to 0).  When the sequence is  empty, return start.]
    #unichr [<type 'builtin_function_or_method'>] [unichr(i) -> Unicode character    Return a Unicode string of one character with ordinal i; 0 <= i <= 0x10ffff.]
    #vars [<type 'builtin_function_or_method'>] [vars([object]) -> dictionary    Without arguments, equivalent to locals().  With an argument, equivalent to object.__dict__.]
    #zip [<type 'builtin_function_or_method'>] [zip(seq1 [, seq2 [...]]) -> [(seq1[0], seq2[0] ...), (...)]    Return a list of tuples, where each tuple contains the i-th element  from each of the argument sequences.  The returned list is truncated  in length to the length of the shortest argument sequence.]
#funcs/method---->
    #input(prompt='') [input([prompt]) -> value]
    #raw_input(prompt='') [raw_input([prompt]) -> string]


def _lktest():
    obj = __builtin__
    laok.dump_description_help(obj)


if __name__ == '__main__':
    laok.lktest_run()